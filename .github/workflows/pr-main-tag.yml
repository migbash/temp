# -----------------------------
# NOTE: https://github.com/marketplace/actions/github-tag-bump
# example 2: on merge to master/main
# -----------------------------

name: 'Bump version [TEST]'
env:
  PATCH_WORDING: 'PATCH,patch,fix,hotfix,add'
  MINOR_WORDING: 'MINOR,minor,feat'
  MAJOR_WORDING: 'MAJOR,major,BREAKING'
'on':
  pull_request:
    types:
      - closed
    branches:
      - dev
jobs:

  # purely for testing purposes
  testing:
    runs-on: ubuntu-22.04
    steps:
      - name: datatypes [test]
        run: |
          echo "True"

  # -----------------------
  # NOTE:
  # -> (on valid) bumps npm version
  # -> of (this) repository to 
  # -> a specified target;
  # -----------------------
  npm-version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    # [â„¹] map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.bump_version_bool }}
    steps:
      - name: checkout source code
        uses: actions/checkout@v3
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: node config
        uses: actions/setup-node@v3
        with:
          node-version: 16 
      - name: git config
        run: |
          git config --global user.email "${{ secrets.GH_ORG_EMAIL }}"
          git config --global user.name "${{ secrets.GH_ORG_NAME }}"
      - name: PATCH - check
        # if: contains(github.event.pull_request.labels.*.name, 'patch')
        if: '${{ contains(env.PATCH_WORDING, github.event.pull_request.title) }}'
        run: |
          echo "Patch Bump Detected"
          # npm version patch
      - name: MINOR - check
        # if: contains(github.event.pull_request.labels.*.name, 'minor')
        if: '${{ contains(env.MINOR_WORDING, github.event.pull_request.title) }}'
        run: |
          echo "Minor Bump Detected"
          # npm version minor
      - name: MAJOR - check
        # if: contains(github.event.pull_request.labels.*.name, 'major')
        if: '${{ contains(env.MAJOR_WORDING, github.event.pull_request.title) }}'
        run: |
          echo "Major Bump Detected"
          # npm version major
      - id: step1
        name: BUMP - check
        # if: contains(github.event.pull_request.labels.*.name, 'major')
        if: '${{ 
            contains(env.PATCH_WORDING, github.event.pull_request.title) 
            || contains(env.MINOR_WORDING, github.event.pull_request.title) 
            || contains(env.MAJOR_WORDING, github.event.pull_request.title) 
          }}'
        run: |
          echo "bump_version_bool=true" >> "$GITHUB_OUTPUT"
      - name: git push version bump
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: git push origin dev --follow-tags --force
      # - id: set-version
        # name: Output version change
        # run: npm pkg get version

  # -----------------------
  # NOTE:
  # -> publishes (this) repository
  # -> npm package to npm-registry;
  # -> dependent on "npm-version-bump"
  # -----------------------
  npm-publish:
    needs: npm-version-bump
    if: needs.npm-version-bump.outputs.output1 == 'true'
    runs-on: ubuntu-22.04
    # (example) [1]
    # env:
      # BUMP_VERSION_BOOL: ${{ needs.npm-version-bump.outputs.output1 }}
    steps:
      # (example) [2]
      # - env:
      #     OUTPUT1: ${{ needs.npm-version-bump.outputs.output1 }}
      #   run: |
      #     echo "$OUTPUT1"
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      # - run: |
      #     echo ${{env.BUMP_VERSION_BOOL}}
      # - run: npm ci
      # - run: npm publish
        # env:
          # NODE_AUTH_TOKEN: ${{secrets.npm_token}}

  # -----------------------
  # NOTE:
  # -> creates a release for (this) repository
  # -> after successfull bump;
  # -> dependent on "npm-version-bump"
  # TODO:
  # FIXME: can be another type of workflow;
  # -----------------------
  create-release:
    needs: npm-version-bump
    if: needs.npm-version-bump.outputs.output1 == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Creating a Release
        run: |
          echo "Creating Release"
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: 'latest'

  # -----------------------
  # NOTE:
  # -> "hard" reset of origin/dev repository
  # -> after successfull PR to (->) main;
  # TODO:
  # -----------------------
  develop-branch-reset:
    needs: npm-version-bump
    runs-on: ubuntu-22.04
    steps:
      - name: checkout source code
        uses: actions/checkout@v3
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: node config
        uses: actions/setup-node@v3
        with:
          node-version: 16 
      - name: git config
        run: |
          git config --global user.email "${{ secrets.GH_ORG_EMAIL }}"
          git config --global user.name "${{ secrets.GH_ORG_NAME }}"
      - name: git reset origin/test
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          git checkout dev
          git pull origin dev
          git checkout origin/test
          git reset --hard dev
          git push --force origin test